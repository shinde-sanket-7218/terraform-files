terraform {
 required_providers {
  aws = {
   source = "hashicorp/aws"
   version = "~>5.0"
  }
 }
}

provider "aws" {
 region = "ap-southeast-2"
 access_key = var.access_key
 secret_key = var.secret_key
}

resource "aws_vpc" "myvpc" {
 cidr_block = "10.0.0.0/16"
 tags = {
 Name = "myvpc"
 }
}

resource "aws_subnet" "privatesubnet" {
 cidr_block = "10.0.1.0/24"
 vpc_id = aws_vpc.myvpc.id
 tags = {
 Name = "privatesubnet"
 }
}

resource "aws_subnet" "publicsubnet" {
 cidr_block = "10.0.2.0/24"
 vpc_id = aws_vpc.myvpc.id
 tags = {
 Name = "publicsubnet"
 }
}

resource "aws_internet_gateway" "myigw" {
 vpc_id = aws_vpc.myvpc.id
 tags = {
 Name = "myigw"
 }
}

resource "aws_route_table" "myrt" {
 vpc_id = aws_vpc.myvpc.id

 route {
  cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.myigw.id
 }
}

resource "aws_route_table_association" "public_sub" {
 route_table_id = aws_route_table.myrt.id
 subnet_id = aws_subnet.publicsubnet.id
 }

resource "aws_instance" "myec2" {
 ami = "ami-049db3b533d63af71"
 instance_type = "t2.micro"
 subnet_id = aws_subnet.publicsubnet.id
 vpc_security_group_ids = [aws_security_group.mysg.id]
 associate_public_ip_address = true
 user_data = <<-EOF
  #!/bin/bash
  sudo apt install nginx -y
  sudo systemctl start nginx
  EOF

 tags ={
 Name = "Webtier"
 }
}

resource "aws_security_group" "mysg" {
 vpc_id = aws_vpc.myvpc.id

 ingress {
  from_port = 80
  to_port = 80
  protocol = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
 }
 egress {
  from_port = 0
  to_port = 0
  protocol = "-1"
  cidr_blocks = ["0.0.0.0/0"]
 }
 tags ={
  Name = "mysg"
 }
}

output "instance_public_ip" {
 description = "the public ip address of ec2 instance"
 value = aws_instance.myec2.public_ip
}

output "instance_url"{
 description = "the URL to access the nginx server"
 value = "http://${aws_instance.myec2.public_ip}"
}